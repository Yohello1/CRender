#version 440

layout (local_size_x = 8, local_size_y = 8) in;
layout (binding = 0, rgba32f) uniform image2D img_output;
layout (binding = 0) uniform sampler2D source;
layout (binding = 1) uniform sampler2D bloom;

#define TARGET_PIXEL ivec2(gl_GlobalInvocationID)

uniform ivec2 scene_size;

uniform bool use_bloom;
uniform bool use_gray_scale;
uniform bool use_tonemapping;

uniform float bloom_strength;

uniform int tonemapping_type;
uniform float tonemapping_exposure;

uniform float gamma_correction;

float log10(float value)
{
    return value / 2.3025850929940456840179914546844;
}

vec3 log10(vec3 value)
{
    return vec3(log10(value.x), log10(value.y), log10(value.z));
}

float saturate(float value)
{
    return clamp(value, 0.0, 1.0);
}

vec3 saturate(vec3 value)
{
    return vec3(saturate(value.x), saturate(value.y), saturate(value.z));
}

vec3 process_bloom(vec3 final)
{
    return final + texelFetch(bloom, TARGET_PIXEL.xy, 0).rgb * bloom_strength;
}

vec3 tonemapping_linear(vec3 colour)
{
    colour *= tonemapping_exposure;
    colour.r = pow(colour.r, 1.0 / gamma_correction);
    colour.g = pow(colour.g, 1.0 / gamma_correction);
    colour.b = pow(colour.b, 1.0 / gamma_correction);
    return colour;
}

vec3 tonemapping_reinhard(vec3 colour)
{
    colour *= tonemapping_exposure;
    colour = colour / (colour + 1);
    colour.r = pow(colour.r, 1.0 / gamma_correction);
    colour.g = pow(colour.g, 1.0 / gamma_correction);
    colour.b = pow(colour.b, 1.0 / gamma_correction);
    return colour;
}

vec3 tonemapping_jim_richard(vec3 colour)
{
    colour *= tonemapping_exposure;
    vec3 x = max(vec3(0.0), colour - 0.004);
    colour = (x * (6.2 * x + 0.5)) / (x * (6.2 * x + 1.7) + 0.06);
    return colour;
}

vec3 tonemapping_uncharted_map(vec3 x)
{
    float A = 0.15;
    float B = 0.50;
    float C = 0.10;
    float D = 0.20;
    float E = 0.02;
    float F = 0.30;
    float W = 11.2;
    return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}

vec3 tonemapping_uncharted(vec3 colour)
{
    colour *= tonemapping_exposure;
    float exposure_bias = 2.0;
    vec3 current = tonemapping_uncharted_map(exposure_bias * colour);
    vec3 white_scale = 1.0 / tonemapping_uncharted_map(vec3(11.2));
    colour = current * white_scale;
    colour.r = pow(colour.r, 1.0 / gamma_correction);
    colour.g = pow(colour.g, 1.0 / gamma_correction);
    colour.b = pow(colour.b, 1.0 / gamma_correction);
    return colour;
}

vec3 process_tonemapping(vec3 final)
{
    if (tonemapping_type == 0)
        return tonemapping_linear(final);
    else if (tonemapping_type == 1)
        return tonemapping_reinhard(final);
    else if (tonemapping_type == 2)
        return tonemapping_jim_richard(final);
    else if (tonemapping_type == 3)
        return tonemapping_uncharted(final);
    return final;
}

vec3 process_gray_scale(vec3 colour)
{
    float gray_scale = 0.2126 * colour.r + 0.7162 * colour.g + 0.0722 * colour.b;
    return vec3(gray_scale);
}

void main ()
{
    if (TARGET_PIXEL.x < scene_size.x && TARGET_PIXEL.y < scene_size.y)
    {
        vec3 final = texelFetch(source, TARGET_PIXEL.xy, 0).rgb;

        if (use_bloom)
            final = process_bloom(final);

        if (use_gray_scale)
            final = process_gray_scale(final);

        if (use_tonemapping)
            final = process_tonemapping(final);

        imageStore(img_output, ivec2(TARGET_PIXEL), vec4(final, 1.0f));
    }
}
