#version 440

layout (local_size_x = 8, local_size_y = 8) in;
layout (binding = 0) uniform sampler2D source;
layout (binding = 0, rgba32f) uniform image2D target;

#define TARGET_PIXEL ivec2(gl_GlobalInvocationID)
uniform ivec2 scene_size;
uniform bool horizontal;

uniform float weight[8] = float[] (
    0.19744746769063704,
    0.1746973469158936,
    0.12099884565428047,
    0.06560233156931679,
    0.027839605612666265,
    0.009246250740395456,
    0.002403157286908872,
    0.00048872837522002);

void main ()
{
    if (!(TARGET_PIXEL.x < scene_size.x && TARGET_PIXEL.y < scene_size.y)) return;

    vec3 result = texelFetch(source, TARGET_PIXEL.xy, 0).rgb * weight[0];

    if (horizontal)
    {
        for (int i = 1; i < 8; ++i)
        {
            result += texelFetch(source, TARGET_PIXEL.xy + ivec2(i, 0.0), 0).rgb * weight[i];
            result += texelFetch(source, TARGET_PIXEL.xy - ivec2(i, 0.0), 0).rgb * weight[i];
        }
    }
    else
    {
        for (int i = 1; i < 8; ++i)
        {
            result += texelFetch(source, TARGET_PIXEL.xy + ivec2(0.0, i), 0).rgb * weight[i];
            result += texelFetch(source, TARGET_PIXEL.xy - ivec2(0.0, i), 0).rgb * weight[i];
        }
    }
    imageStore(target, ivec2(TARGET_PIXEL.xy), vec4(result, 1.0f));
}
